#!/usr/bin/env bash

print_usage(){
	cat << EOF
Usage: $(basename ${BASH_SOURCE}) [OPTION] [GIT_REPOSITORY]...
Show statuses of Git repositories given in arguments or of all 
repositories found from the current working directory when no arguments 
are specified.

Options:
  -f, -F	Do not (f) or do (F) run git fetch.
		Git fetch is not done by default.

  -l, -L	Do not (l) or do (L) show git logs for the commits 
		behind/ahead. Git logs are not showed by default.

Git Config:
  gitsup.rungitfetch	true/false valued. Overridden by option -f, -F.
  gitsup.showgitlog	true/false valued. Overridden by option -l, -L.
EOF
}

BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
ORANGE=$(tput setaf 172)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)
BOLD=$(tput bold)

CURRENT_WORKING_DIRECTORY="$(pwd)"
trap "cd '${CURRENT_WORKING_DIRECTORY}'" 0

# Try to retrieve RUN_GIT_FETCH from gitconfig
RUN_GIT_FETCH="false"
GITCONFIG_RUN_GIT_FETCH="$(git config "gitsup.rungitfetch")"
if [[ "${GITCONFIG_RUN_GIT_FETCH}" == "true" ]]; then
	RUN_GIT_FETCH="true"
fi

# Try to retrieve SHOW_GIT_LOG from gitconfig
SHOW_GIT_LOG="false"
GITCONFIG_SHOW_GIT_LOG="$(git config "gitsup.showgitlog")"
if [[ "${GITCONFIG_SHOW_GIT_LOG}" == "true" ]]; then
	SHOW_GIT_LOG="true"
fi

DEBUG="false"
while getopts ":hfFlLd" ARG; do
	case "${ARG}" in
		h)
			print_usage
			exit 0
			;;
		f)
			RUN_GIT_FETCH="false"
			;;
		F)
			RUN_GIT_FETCH="true"
			;;
		l)
			SHOW_GIT_LOG="false"
			;;
		L)
			SHOW_GIT_LOG="true"
			;;
		d)
			DEBUG="true"
			;;
		*)
			printf "Unknown option: -%s\n\n" "${OPTARG}"
			print_usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

############################
# Collect Git repositories
############################
GIT_REPOSITORY_ARRAY=()

# Add explicit arguments
if [[ "${#}" -ne 0 ]]; then
	for GIT_REPOSITORY in "${@}"; do
		GIT_REPOSITORY=$(readlink -e "${GIT_REPOSITORY}")
		if [[ "${?}" != 0 ]]; then
			printf "!ERROR! Cannot find Git repository at [%s]\n" "${GIT_REPOSITORY}"
			continue
		fi
		if [[ ! -d "${GIT_REPOSITORY}" ]]; then
			printf "!ERROR! Cannot find Git repository at [%s]\n" "${GIT_REPOSITORY}"
			continue
		fi
		if [[ ! -d "${GIT_REPOSITORY}/.git" ]]; then
			printf "!ERROR! Cannot find Git repository at [%s]\n" "${GIT_REPOSITORY}"
			continue
		fi
		GIT_REPOSITORY_ARRAY+=( "${GIT_REPOSITORY}" )
	done
else
	# Search for a Git repository in CWD
	GIT_REPOSITORY_TOPLEVEL=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ "${?}" == 0 ]]; then
		GIT_REPOSITORY_ARRAY+=( "${GIT_REPOSITORY_TOPLEVEL}" )
	else
		for FOLDER in *; do
			FOLDER=$(readlink -e "${FOLDER}")
			if [[ "${?}" != 0 ]]; then
				# Cannot retrieve absolute path for FOLDER, this should not happen here
				continue
			fi
			if [[ ! -d "${FOLDER}" ]]; then
				continue
			fi
			if [[ ! -d "${FOLDER}/.git" ]]; then
				continue
			fi
			GIT_REPOSITORY_ARRAY+=( "${FOLDER}" )
		done
	fi
fi

###########################
# Process each repository
###########################

# We use git branch format: %(HEAD) %(refname:short) %(push:track) %(objectname:short) %(contents:subject) %(upstream:short)
# With STX/ETX characters around each field for easy parsing.
STX=$'\002'
ETX=$'\003'
GIT_BRANCH_LINE_REGEX="^${STX}( |\*)${ETX}${STX}(.*)${ETX}${STX}(.*)${ETX}${STX}(.*)${ETX}${STX}(.*)${ETX}${STX}(.*)${ETX}$"

for GIT_REPOSITORY in "${GIT_REPOSITORY_ARRAY[@]}"; do
	cd "${GIT_REPOSITORY}"
	
	GIT_REPOSITORY_NAME=$(basename "${GIT_REPOSITORY}")
	
	# Retrieve current branch
	LOCAL_CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	if [[ "${?}" -ne 0 ]]; then
		printf "!ERROR! Cannot retrieve local current branch in [%s]\n" "${GIT_REPOSITORY}"
		continue
	fi
	
	# Retrieve local changes count
	LOCAL_CHANGE_COUNT=$(git status --porcelain | wc -l 2>&1)
	if [[ "${?}" -ne 0 ]]; then
		printf "!ERROR! Something went wrong while checking for local changes in [%s]\n" "${GIT_REPOSITORY}"
		continue
	fi
	
	GIT_REPOSITORY_LOCAL_CHANGES=""
	if [[ "${LOCAL_CHANGE_COUNT}" -ne 0 ]]; then
		GIT_REPOSITORY_LOCAL_CHANGES=" !! ${LOCAL_CHANGE_COUNT} local change(s)"
	fi
	printf "${GREEN}\\u23FA %s${NORMAL}%s\n" "${GIT_REPOSITORY_NAME}" "${GIT_REPOSITORY_LOCAL_CHANGES}"
	
	# Run Git fetch
	if ${RUN_GIT_FETCH}; then
		git fetch >/dev/null 2>/dev/null
		if [[ "${?}" -ne 0 ]]; then
			printf " Something went wrong during git fetch\n"
			continue
		fi
	fi
	
	GIT_BRANCH=$(git branch --list --format "%02%(HEAD)%03%02%(refname:short)%03%02%(push:track)%03%02%(objectname:short)%03%02%(contents:subject)%03%02%(upstream:short)%03")
	while IFS= read -r GIT_BRANCH_LINE; do
		if [[ ! "${GIT_BRANCH_LINE}" =~ ${GIT_BRANCH_LINE_REGEX} ]]; then
			printf "!ERROR! GIT_BRANCH_LINE is not well formed [%s]\n" "${GIT_BRANCH_LINE}"
			break
		fi
		
		if ${DEBUG}; then
			printf "GIT_BRANCH_LINE[%s]\n" "${GIT_BRANCH_LINE}"
		fi
		
		GIT_BRANCH_LINE_IS_HEAD="${BASH_REMATCH[1]}"
		GIT_BRANCH_LINE_REF_NAME="${BASH_REMATCH[2]}"
		GIT_BRANCH_LINE_PUSH_TRACK="${BASH_REMATCH[3]}"
		if [[ ! -z "${GIT_BRANCH_LINE_PUSH_TRACK}" ]]; then
			GIT_BRANCH_LINE_PUSH_TRACK=" ${GIT_BRANCH_LINE_PUSH_TRACK}"
		fi
		GIT_BRANCH_LINE_OBJECT_NAME="${BASH_REMATCH[4]}"
		GIT_BRANCH_LINE_CONTENTS="${BASH_REMATCH[5]}"
		GIT_BRANCH_LINE_UPSTREAM="${BASH_REMATCH[6]}"
		GIT_UPSTREAM_NOT_GONE="$(git show-branch "remotes/${GIT_BRANCH_LINE_UPSTREAM}" >/dev/null 2>/dev/null;echo $?)"
		
		if [[ "${LOCAL_CURRENT_BRANCH}" != "${GIT_BRANCH_LINE_REF_NAME}" ]]; then
			printf "   %s %s%s \\u279C ${BLUE}%s${NORMAL}\n" "${GIT_BRANCH_LINE_IS_HEAD}" "${GIT_BRANCH_LINE_REF_NAME}" "${GIT_BRANCH_LINE_PUSH_TRACK}" "${GIT_BRANCH_LINE_UPSTREAM}"
		else
			printf "   %s ${GREEN}%s${NORMAL}%s \\u279C ${BLUE}%s${NORMAL}\n" "${GIT_BRANCH_LINE_IS_HEAD}" "${GIT_BRANCH_LINE_REF_NAME}" "${GIT_BRANCH_LINE_PUSH_TRACK}" "${GIT_BRANCH_LINE_UPSTREAM}"
			
			if [[ "${GIT_UPSTREAM_NOT_GONE}" -eq 0 ]] && ${SHOW_GIT_LOG}; then
				GIT_LOG_BEHIND="$(git log "${GIT_BRANCH_LINE_REF_NAME}".."${GIT_BRANCH_LINE_UPSTREAM}" --pretty=format:"     %C(yellow)%h %Cblue%ad %Cgreen%<(7)%aN%Cred %Creset%s" --date=iso8601-local)"
				if [[ ! -z "${GIT_LOG_BEHIND}" ]]; then
					printf "     ↓↓\n%s\n" "${GIT_LOG_BEHIND}"
				fi
				
				GIT_LOG_AHEAD="$(git log "${GIT_BRANCH_LINE_UPSTREAM}".."${GIT_BRANCH_LINE_REF_NAME}" --pretty=format:"     %C(yellow)%h %Cblue%ad %Cgreen%<(7)%aN%Cred %Creset%s" --date=iso8601-local)"
				if [[ ! -z "${GIT_LOG_AHEAD}" ]]; then
					printf "     ↑↑\n%s\n" "${GIT_LOG_AHEAD}"
				fi
			fi
		fi
	done <<< "${GIT_BRANCH}"
	
	printf "\n"
done
