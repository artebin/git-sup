#!/usr/bin/env bash

print_usage(){
	cat << EOF
Usage: $(basename ${BASH_SOURCE}) [OPTION]... [GIT_PROJECT_FOLDER...]
Show statuses of GIT projects given in arguments or all projects found in the current directory when no argument specified.

  -f PERFORM_GIT_FETCH

EOF
}

BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
ORANGE=$(tput setaf 172)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

CURRENT_WORKING_DIRECTORY="$(pwd)"
trap "cd '${CURRENT_WORKING_DIRECTORY}'" 0

RUN_FETCH_ON_GIT_REPO="false"
while getopts "fh" ARG; do
	case "${ARG}" in
		h)
			print_usage
			exit 0
			;;
		f)
			RUN_FETCH_ON_GIT_REPO="true"
			;;
		*)
			printf "Unknown option: %s\n" "${OPTARG}" 1>&2
			print_usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

GIT_REPO_DIR_ARRAY=()
if [[ "${#}" -eq 0 ]]; then
	for FILE in *; do
		if [[ -d "${FILE}" ]]; then
			GIT_REPO_DIR_ARRAY+=( "${FILE}" )
		fi
	done
else
	for FILE in "${@}"; do
		if [[ -d "${FILE}" ]]; then
			GIT_REPO_DIR_ARRAY+=( "${FILE}" )
		fi
	done
fi

GIT_BRANCH_LINE_REGEX="^( |\*)[[:space:]]+([[:alnum:]-]+)[[:space:]]+([[:alnum:]]+)[[:space:]]+\[(.+)\][[:space:]]+(.*)$"

for GIT_REPO_DIR in "${GIT_REPO_DIR_ARRAY[@]}"; do
	cd "${CURRENT_WORKING_DIRECTORY}"
	
	if [[ ! -d "${GIT_REPO_DIR}" ]]; then
		#printf " Cannot find directory\n"
		continue
	fi
	
	if [[ ! -d "${GIT_REPO_DIR}/.git" ]]; then
		#printf " Not a GIT repository\n"
		continue
	fi
	
	cd "${GIT_REPO_DIR}"
	
	# Retrieve current branch
	#CURRENT_LOCAL_BRANCH=$(git branch --show-current 2>/dev/null)
	CURRENT_LOCAL_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	if [[ "${?}" -ne 0 ]]; then
		printf " Cannot retrieve local current branch\n"
		continue
	fi
	
	# Retrieve local changes count
	PENDING_CHANGE_COUNT=$(git status --porcelain | wc -l 2>&1)
	if [[ "${?}" -ne 0 ]]; then
		printf "  Something went wrong while checking for local changes\n"
		continue
	fi
	
	GIT_REPO_NAME=$(basename "${GIT_REPO_DIR}")
	GIT_REPO_PENDING_CHANGES=""
	if [[ "${PENDING_CHANGE_COUNT}" -ne 0 ]]; then
		GIT_REPO_PENDING_CHANGES=" !! ${PENDING_CHANGE_COUNT} pending change(s)"
	fi
	printf "\U1F5C0 ${GREEN}%s${NORMAL}%s\n" "${GIT_REPO_NAME}" "${GIT_REPO_PENDING_CHANGES}"
	
	# GIT fetch
	if ${RUN_FETCH_ON_GIT_REPO}; then
		git fetch >/dev/null 2>/dev/null
		if [[ "${?}" -ne 0 ]]; then
			printf " Something went wrong during git fetch\n"
			continue
		fi
	fi
	
	GIT_BRANCH=$(git branch -vv)
	while IFS= read -r LINE; do
		if [[ ! "${LINE}" =~ ${GIT_BRANCH_LINE_REGEX} ]]; then
			printf "! GIT_BRANCH line is not well formed\n"
			break
		fi
		
		GIT_BRANCH_LINE_IS_CURRENT_BRANCH="${BASH_REMATCH[1]}"
		GIT_BRANCH_LINE_BRANCH_NAME="${BASH_REMATCH[2]}"
		GIT_BRANCH_LINE_UPSTREAM="${BASH_REMATCH[4]}"
		
		if [[ "${CURRENT_LOCAL_BRANCH}" == '*' ]]; then
			printf "   %s %s ↪ ${BLUE}%s${NORMAL}\n" "${GIT_BRANCH_LINE_IS_CURRENT_BRANCH}" "${GIT_BRANCH_LINE_BRANCH_NAME}" "${GIT_BRANCH_LINE_UPSTREAM}"
		else
			printf "   %s ${YELLOW}%s${NORMAL} ↪ ${BLUE}%s${NORMAL}\n" "${GIT_BRANCH_LINE_IS_CURRENT_BRANCH}" "${GIT_BRANCH_LINE_BRANCH_NAME}" "${GIT_BRANCH_LINE_UPSTREAM}"
		fi
	done <<< "${GIT_BRANCH}"
	
	printf "\n"
done
